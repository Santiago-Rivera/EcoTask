// Servicio de notificaciones por email
import emailjs from '@emailjs/browser';

export interface EmailNotification {
  to: string;
  subject: string;
  message: string;
  type: 'task' | 'event' | 'group' | 'reminder' | 'welcome' | 'taskCreated' | 'groupCreated' | 'eventCreated' | 'passwordChanged' | '2faEnabled';
}

export interface NotificationSettings {
  emailNotifications: boolean;
  pushNotifications: boolean;
  taskReminders: boolean;
  eventReminders: boolean;
  groupInvitations: boolean;
  weeklyDigest: boolean;
}

export interface TaskData {
  userName: string;
  taskTitle: string;
  dueDate: string;
  priority: string;
  description?: string;
}

export interface EventData {
  userName: string;
  eventTitle: string;
  eventDate: string;
  location: string;
  eventType: string;
  description?: string;
}

export interface DigestData {
  userName: string;
  completedTasks?: number;
  eventsAttended?: number;
  activeGroups?: number;
  ecoImpact?: string;
  achievements?: string;
}

export interface TemplateData {
  name?: string;
  userName?: string;
}

export interface TaskCreatedData {
  userName: string;
  taskTitle: string;
  dueDate: string;
  priority: string;
  description?: string;
  category?: string;
}

interface GroupCreatedData {
  groupName: string;
  groupDescription: string;
  memberCount: number;
  color?: string;
  userEmail: string;
  userName: string;
}

interface EventCreatedData {
  eventTitle: string;
  eventDescription: string;
  eventDate: string;
  eventLocation: string;
  eventType: string;
  maxParticipants?: number;
  userEmail: string;
  userName: string;
}

interface PasswordChangedData {
  userName: string;
  changeDate: string;
  changeTime: string;
}

interface TwoFAEnabledData {
  userName: string;
  enabledDate: string;
  enabledTime: string;
}

class NotificationService {
  private isEmailServiceConfigured = false;
  
  // Configuraci√≥n de EmailJS (servicio gratuito y confiable)
  private emailJSConfig = {
    serviceId: 'service_ecotask', // Se configurar√° m√°s adelante
    templateId: 'template_ecotask', // Se configurar√° m√°s adelante  
    publicKey: 'YOUR_EMAILJS_PUBLIC_KEY' // Se configurar√° m√°s adelante
  };

  // Configurar EmailJS para env√≠o real de emails
  async initializeEmailService() {
    try {
      // Inicializar EmailJS
      emailjs.init(this.emailJSConfig.publicKey);
      
      // En desarrollo, usar configuraci√≥n de prueba
      if (process.env.NODE_ENV === 'development') {
        console.log('üìß EmailJS inicializado en modo desarrollo');
        console.log('üìù Para configurar env√≠o real, ve a: https://www.emailjs.com/');
        this.isEmailServiceConfigured = false; // Mantener simulaci√≥n en desarrollo
      } else {
        this.isEmailServiceConfigured = true;
        console.log('üìß EmailJS configurado para producci√≥n');
      }
    } catch (error) {
      console.error('‚ùå Error al inicializar EmailJS:', error);
      this.isEmailServiceConfigured = false;
    }
  }

  // Enviar notificaci√≥n por email usando EmailJS o simulaci√≥n
  async sendEmailNotification(notification: EmailNotification): Promise<boolean> {
    try {
      console.log('üìß Iniciando env√≠o de notificaci√≥n:', {
        to: notification.to,
        subject: notification.subject,
        type: notification.type,
        timestamp: new Date().toISOString()
      });

      // Intentar env√≠o real con EmailJS si est√° configurado
      if (this.isEmailServiceConfigured) {
        return await this.sendRealEmail(notification);
      } else {
        // Modo desarrollo/simulaci√≥n
        return await this.sendSimulatedEmail(notification);
      }
    } catch (error) {
      console.error('‚ùå Error al enviar notificaci√≥n:', error);
      // En caso de error, mostrar notificaci√≥n simulada como fallback
      await this.sendSimulatedEmail(notification);
      return false;
    }
  }

  // Env√≠o real usando EmailJS
  private async sendRealEmail(notification: EmailNotification): Promise<boolean> {
    try {
      const templateParams = {
        to_email: notification.to,
        to_name: notification.to.split('@')[0], // Extraer nombre del email
        subject: notification.subject,
        message: notification.message,
        from_name: 'EcoTask',
        reply_to: 'noreply@ecotask.app'
      };

      const response = await emailjs.send(
        this.emailJSConfig.serviceId,
        this.emailJSConfig.templateId,
        templateParams
      );

      if (response.status === 200) {
        console.log('‚úÖ Email enviado exitosamente:', response);
        this.saveNotificationHistory(notification);
        this.showSuccessNotification(`Email enviado a ${notification.to}`);
        return true;
      } else {
        throw new Error(`EmailJS respondi√≥ con status: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå Error al enviar email real:', error);
      throw error;
    }
  }

  // Env√≠o simulado para desarrollo y fallback
  private async sendSimulatedEmail(notification: EmailNotification): Promise<boolean> {
    console.log('üß™ Simulando env√≠o de email:', {
      to: notification.to,
      subject: notification.subject,
      message: notification.message,
      type: notification.type,
      timestamp: new Date().toISOString()
    });

    // Simular delay de red
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Guardar en historial
    this.saveNotificationHistory(notification);

    // Mostrar notificaci√≥n simulada
    this.showSimulatedNotification(notification);

    return true;
  }

  // Mostrar notificaci√≥n de √©xito
  private showSuccessNotification(message: string) {
    this.showVisualNotification(message, 'success');
  }

  // Mostrar notificaci√≥n simulada en desarrollo
  private showSimulatedNotification(notification: EmailNotification) {
    const message = `Email simulado enviado a ${notification.to}`;
    this.showVisualNotification(message, 'simulation');
  }

  // Sistema unificado de notificaciones visuales
  private showVisualNotification(message: string, type: 'success' | 'simulation' | 'error' = 'success') {
    // Configurar colores seg√∫n el tipo
    const colors = {
      success: 'bg-green-500',
      simulation: 'bg-blue-500', 
      error: 'bg-red-500'
    };
    
    const icons = {
      success: '‚úÖ',
      simulation: 'üß™',
      error: '‚ùå'
    };

    // Crear una notificaci√≥n visual temporal
    const notificationElement = document.createElement('div');
    notificationElement.className = `
      fixed top-4 right-4 z-[100] ${colors[type]} text-white px-6 py-4 rounded-lg shadow-lg max-w-sm
      transform translate-x-full transition-transform duration-300 ease-in-out
    `;
    notificationElement.innerHTML = `
      <div class="flex items-start space-x-3">
        <div class="flex-shrink-0">
          <span class="text-lg">${icons[type]}</span>
        </div>
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
          <p class="text-xs opacity-90 mt-1">${type === 'simulation' ? 'Modo desarrollo' : 'Notificaci√≥n real'}</p>
        </div>
      </div>
    `;

    document.body.appendChild(notificationElement);

    // Animar entrada
    setTimeout(() => {
      notificationElement.style.transform = 'translateX(0)';
    }, 100);

    // Remover despu√©s de 4 segundos
    setTimeout(() => {
      notificationElement.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (document.body.contains(notificationElement)) {
          document.body.removeChild(notificationElement);
        }
      }, 300);
    }, 4000);
  }

  // Guardar historial de notificaciones
  private saveNotificationHistory(notification: EmailNotification) {
    try {
      const history = this.getNotificationHistory();
      const newEntry = {
        ...notification,
        id: Date.now().toString(),
        sentAt: new Date().toISOString(),
        status: 'sent'
      };
      
      history.unshift(newEntry);
      
      // Mantener solo los √∫ltimos 50 registros
      if (history.length > 50) {
        history.splice(50);
      }
      
      localStorage.setItem('notification-history', JSON.stringify(history));
    } catch (error) {
      console.error('Error al guardar historial:', error);
    }
  }

  // Obtener historial de notificaciones
  getNotificationHistory() {
    try {
      const stored = localStorage.getItem('notification-history');
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  }

  // Plantillas de email
  getEmailTemplate(type: string, data: Partial<TemplateData & TaskData & EventData & DigestData & TaskCreatedData & GroupCreatedData & EventCreatedData & PasswordChangedData & TwoFAEnabledData>): { subject: string; message: string } {
    const templates: Record<string, { subject: string; message: string }> = {
      welcome: {
        subject: '¬°Bienvenido a EcoTask! üå±',
        message: `
Hola ${data.name},

¬°Bienvenido a EcoTask! Estamos emocionados de tenerte en nuestra comunidad dedicada a hacer del mundo un lugar m√°s sostenible.

Con EcoTask puedes:
‚Ä¢ Organizar y gestionar tus tareas ecol√≥gicas
‚Ä¢ Participar en eventos ambientales
‚Ä¢ Colaborar con grupos locales
‚Ä¢ Hacer seguimiento de tu impacto ambiental

¬°Comienza tu viaje ecol√≥gico hoy mismo!

Saludos verdes,
El equipo de EcoTask üåç
        `
      },
      taskReminder: {
        subject: `Recordatorio: ${data.taskTitle} üìã`,
        message: `
Hola ${data.userName},

Este es un recordatorio sobre tu tarea pendiente:

üìã **${data.taskTitle}**
üìÖ Fecha l√≠mite: ${data.dueDate}
üè∑Ô∏è Prioridad: ${data.priority}

${data.description ? `Descripci√≥n: ${data.description}` : ''}

¬°No olvides completarla para mantener tu progreso ecol√≥gico!

Saludos verdes,
EcoTask üå±
        `
      },
      eventInvitation: {
        subject: `Invitaci√≥n a evento: ${data.eventTitle} üåç`,
        message: `
Hola ${data.userName},

Te invitamos a participar en nuestro pr√≥ximo evento ecol√≥gico:

üåç **${data.eventTitle}**
üìÖ Fecha: ${data.eventDate}
üìç Ubicaci√≥n: ${data.location}
üë• Tipo: ${data.eventType}

${data.description ? `Descripci√≥n: ${data.description}` : ''}

¬°√önete a nosotros y hagamos la diferencia juntos!

Confirma tu asistencia en la aplicaci√≥n.

Saludos verdes,
EcoTask üå±
        `
      },
      weeklyDigest: {
        subject: 'Tu resumen semanal EcoTask üìä',
        message: `
Hola ${data.userName},

Aqu√≠ tienes tu resumen de actividades de esta semana:

üìã **Tareas completadas:** ${data.completedTasks || 0}
üåç **Eventos participados:** ${data.eventsAttended || 0}
üë• **Grupos activos:** ${data.activeGroups || 0}
‚ôªÔ∏è **Impacto ecol√≥gico:** ${data.ecoImpact || 'En c√°lculo'}

${data.achievements ? `üèÜ **Logros desbloqueados:** ${data.achievements}` : ''}

¬°Sigue as√≠! Tu compromiso con el medio ambiente marca la diferencia.

Saludos verdes,
EcoTask üå±
        `
      },
      taskCreated: {
        subject: `‚úÖ Nueva tarea creada: ${data.taskTitle} üìã`,
        message: `
Hola ${data.userName},

¬°Has creado una nueva tarea en EcoTask!

üìã **${data.taskTitle}**
üìÖ Fecha l√≠mite: ${data.dueDate}
üè∑Ô∏è Prioridad: ${data.priority}
üìÇ Categor√≠a: ${(data as TaskCreatedData).category || 'Sin categor√≠a'}

${data.description ? `üìù Descripci√≥n: ${data.description}` : ''}

¬°Excelente trabajo organizando tus actividades ecol√≥gicas! Recuerda completarla a tiempo para mantener tu progreso.

Saludos verdes,
EcoTask üå±
        `
      },
      groupCreated: {
        subject: `üë• Nuevo grupo creado: ${(data as GroupCreatedData).groupName} üåç`,
        message: `
Hola ${data.userName},

¬°Has creado un nuevo grupo en EcoTask!

üë• **${(data as GroupCreatedData).groupName}**
üìù Descripci√≥n: ${data.description || 'Sin descripci√≥n'}
üé® Color: ${(data as GroupCreatedData).color || 'Personalizado'}

Tu grupo est√° listo para colaborar en proyectos ecol√≥gicos. ¬°Invita a m√°s personas para hacer un mayor impacto ambiental!

Saludos verdes,
EcoTask üå±
        `
      },
      eventCreated: {
        subject: `üåç Nuevo evento creado: ${data.eventTitle} üìÖ`,
        message: `
Hola ${data.userName},

¬°Has creado un nuevo evento ecol√≥gico en EcoTask!

üåç **${data.eventTitle}**
üìÖ Fecha: ${data.eventDate}
üìç Ubicaci√≥n: ${data.location}
üë• Tipo: ${data.eventType}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Participantes m√°ximos: ${(data as EventCreatedData).maxParticipants || 'Sin l√≠mite'}

${data.description ? `üìù Descripci√≥n: ${data.description}` : ''}

¬°Excelente iniciativa! Tu evento ayudar√° a crear conciencia y acci√≥n ambiental en tu comunidad.

Saludos verdes,
EcoTask üå±
        `
      },
      passwordChanged: {
        subject: `üîí Contrase√±a cambiada exitosamente - EcoTask`,
        message: `
Hola ${data.userName},

‚úÖ **Tu contrase√±a ha sido cambiada exitosamente**

üîí **Detalles del cambio:**
üìÖ Fecha: ${(data as PasswordChangedData).changeDate}
üïê Hora: ${(data as PasswordChangedData).changeTime}

Si no fuiste t√∫ quien realiz√≥ este cambio, por favor contacta a nuestro equipo de soporte inmediatamente.

üîê **Consejos de seguridad:**
‚Ä¢ Usa una contrase√±a √∫nica y segura
‚Ä¢ No compartas tu contrase√±a con nadie
‚Ä¢ Mant√©n tu cuenta segura

Saludos verdes,
EcoTask üå±
        `
      },
      '2faEnabled': {
        subject: `üîê Autenticaci√≥n de dos factores activada - EcoTask`,
        message: `
Hola ${data.userName},

‚úÖ **La autenticaci√≥n de dos factores ha sido activada exitosamente**

üîê **Detalles de la activaci√≥n:**
üìÖ Fecha: ${(data as TwoFAEnabledData).enabledDate}
üïê Hora: ${(data as TwoFAEnabledData).enabledTime}

üõ°Ô∏è **Tu cuenta ahora est√° m√°s segura:**
‚Ä¢ Se requiere un c√≥digo de 6 d√≠gitos desde tu app authenticator
‚Ä¢ C√≥digos de respaldo guardados de forma segura
‚Ä¢ Protecci√≥n adicional contra accesos no autorizados

üì± **Recuerda:**
‚Ä¢ Mant√©n tu app authenticator instalada y sincronizada
‚Ä¢ Guarda tus c√≥digos de respaldo en un lugar seguro
‚Ä¢ Si cambias de tel√©fono, reconfigura la 2FA

Si no fuiste t√∫ quien activ√≥ esta funci√≥n, contacta a soporte inmediatamente.

Saludos verdes,
EcoTask üå±
        `
      }
    };

    return templates[type] || {
      subject: 'Notificaci√≥n de EcoTask',
      message: `Hola ${data.name || data.userName},\n\nTienes una nueva notificaci√≥n en EcoTask.\n\nSaludos verdes,\nEcoTask üå±`
    };
  }

  // Enviar notificaci√≥n de bienvenida
  async sendWelcomeNotification(userEmail: string, userName: string): Promise<boolean> {
    const template = this.getEmailTemplate('welcome', { name: userName });
    
    return this.sendEmailNotification({
      to: userEmail,
      subject: template.subject,
      message: template.message,
      type: 'welcome'
    });
  }

  // Enviar recordatorio de tarea
  async sendTaskReminder(userEmail: string, taskData: TaskData): Promise<boolean> {
    const template = this.getEmailTemplate('taskReminder', taskData);
    
    return this.sendEmailNotification({
      to: userEmail,
      subject: template.subject,
      message: template.message,
      type: 'reminder'
    });
  }

  // Enviar invitaci√≥n a evento
  async sendEventInvitation(userEmail: string, eventData: EventData): Promise<boolean> {
    const template = this.getEmailTemplate('eventInvitation', eventData);
    
    return this.sendEmailNotification({
      to: userEmail,
      subject: template.subject,
      message: template.message,
      type: 'event'
    });
  }

  // Enviar resumen semanal
  async sendWeeklyDigest(userEmail: string, digestData: DigestData): Promise<boolean> {
    const template = this.getEmailTemplate('weeklyDigest', digestData);
    
    return this.sendEmailNotification({
      to: userEmail,
      subject: template.subject,
      message: template.message,
      type: 'reminder'
    });
  }

  // Verificar configuraci√≥n de notificaciones del usuario
  getUserNotificationSettings(userEmail: string): NotificationSettings {
    try {
      const stored = localStorage.getItem(`notification-settings-${userEmail}`);
      return stored ? JSON.parse(stored) : {
        emailNotifications: true,
        pushNotifications: false,
        taskReminders: true,
        eventReminders: true,
        groupInvitations: true,
        weeklyDigest: false
      };
    } catch {
      return {
        emailNotifications: true,
        pushNotifications: false,
        taskReminders: true,
        eventReminders: true,
        groupInvitations: true,
        weeklyDigest: false
      };
    }
  }

  // Guardar configuraci√≥n de notificaciones del usuario
  saveUserNotificationSettings(userEmail: string, settings: NotificationSettings) {
    try {
      localStorage.setItem(`notification-settings-${userEmail}`, JSON.stringify(settings));
    } catch (error) {
      console.error('Error al guardar configuraci√≥n de notificaciones:', error);
    }
  }

  // M√©todo para configurar EmailJS con credenciales reales
  configureEmailJS(serviceId: string, templateId: string, publicKey: string) {
    this.emailJSConfig = {
      serviceId,
      templateId,
      publicKey
    };
    
    try {
      emailjs.init(publicKey);
      this.isEmailServiceConfigured = true;
      console.log('‚úÖ EmailJS configurado correctamente para env√≠o real');
      this.showSuccessNotification('EmailJS configurado - Emails reales habilitados');
      return true;
    } catch (error) {
      console.error('‚ùå Error al configurar EmailJS:', error);
      this.isEmailServiceConfigured = false;
      return false;
    }
  }

  // M√©todo para verificar si el servicio est√° configurado
  isRealEmailEnabled(): boolean {
    return this.isEmailServiceConfigured;
  }

  // M√©todo para obtener instrucciones de configuraci√≥n
  getSetupInstructions(): string {
    return `
üìß Para configurar env√≠o real de emails:

1. Ve a https://www.emailjs.com/ y crea una cuenta gratuita
2. Crea un servicio de email (Gmail, Outlook, etc.)
3. Crea una plantilla de email
4. Obt√©n tu Service ID, Template ID y Public Key
5. Usa el m√©todo configureEmailJS() desde la consola:

notificationService.configureEmailJS('tu_service_id', 'tu_template_id', 'tu_public_key');

üîß Tambi√©n puedes usar la funci√≥n de configuraci√≥n autom√°tica:
notificationService.quickSetup();
    `;
  }

  // Configuraci√≥n r√°pida para desarrollo (temporal)
  quickSetup() {
    console.log(this.getSetupInstructions());
    
    console.log('‚ö° Para configurar EmailJS con credenciales reales, usa:');
    console.log('notificationService.configureEmailJS(serviceId, templateId, publicKey)');
    console.log('üìù Para producci√≥n, configura con tus propias credenciales de EmailJS');
    
    // Por ahora mantener simulaci√≥n hasta que tengas credenciales reales
    this.isEmailServiceConfigured = false;
  }

  // Verificar si se deben enviar notificaciones al usuario
  shouldSendNotification(userEmail: string, notificationType: keyof NotificationSettings): boolean {
    const settings = this.getUserNotificationSettings(userEmail);
    return settings[notificationType] === true;
  }

  // M√©todo para probar el env√≠o de notificaciones
  async testEmailNotification(userEmail: string, userName: string): Promise<boolean> {
    if (!this.shouldSendNotification(userEmail, 'emailNotifications')) {
      console.log('‚ùå Notificaciones por email deshabilitadas para este usuario');
      return false;
    }

    const testNotification: EmailNotification = {
      to: userEmail,
      subject: '‚úÖ Prueba de notificaciones EcoTask',
      message: `
Hola ${userName},

¬°Excelente! Las notificaciones por email est√°n funcionando correctamente.

Esta es una notificaci√≥n de prueba para confirmar que tu configuraci√≥n est√° lista.

Ahora recibir√°s:
‚Ä¢ Recordatorios de tareas importantes
‚Ä¢ Invitaciones a eventos ecol√≥gicos  
‚Ä¢ Actualizaciones de grupos
‚Ä¢ Res√∫menes semanales (si est√° habilitado)

¬°Gracias por unirte a nuestra misi√≥n ecol√≥gica!

Saludos verdes,
EcoTask üå±
      `,
      type: 'welcome'
    };

    return this.sendEmailNotification(testNotification);
  }
}

export const notificationService = new NotificationService();
